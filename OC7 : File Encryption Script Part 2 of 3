from cryptography.fernet import Fernet
import os

def encrypt_file(key, filepath):
  """Encrypts a file using the provided key and filepath.
     Deletes the original file and replaces it with the encrypted version."""
  with open(filepath, 'rb') as file:
    data = file.read()
  fernet = Fernet(key)
  encrypted_data = fernet.encrypt(data)
  with open(filepath, 'wb') as file:
    file.write(encrypted_data)
  print(f"File encrypted successfully: {filepath}")

def decrypt_file(key, filepath):
  """Decrypts a file using the provided key and filepath.
     Deletes the encrypted file and replaces it with the decrypted version."""
  with open(filepath, 'rb') as file:
    encrypted_data = file.read()
  fernet = Fernet(key)
  try:
    decrypted_data = fernet.decrypt(encrypted_data)
  except Fernet.InvalidSignature:
    print(f"Error: Invalid decryption key or corrupt file.")
    return
  with open(filepath, 'wb') as file:
    file.write(decrypted_data)
  print(f"File decrypted successfully: {filepath}")

def encrypt_folder(key, folderpath):
  """Recursively encrypts all files within a directory."""
  for root, dirs, files in os.walk(folderpath):
    for filename in files:
      filepath = os.path.join(root, filename)
      encrypt_file(key, filepath)

def decrypt_folder(key, folderpath):
  """Recursively decrypts all files within a directory."""
  for root, dirs, files in os.walk(folderpath):
    for filename in files:
      filepath = os.path.join(root, filename)
      decrypt_file(key, filepath)

def write_key():
  """Generates a key and saves it into a file"""
  key = Fernet.generate_key()
  with open("key.key", "wb") as key_file:
    key_file.write(key)

def load_key():
  """Loads the key from the current directory named `key.key`"""
  try:
    with open("key.key", "rb") as key_file:
      key = key_file.read()
      return key
  except FileNotFoundError:
    print("Key file not found. Please generate a key using 'write_key' function.")
    exit()

def main():
  """Prompts user for mode selection and performs corresponding actions."""
  print("Select a mode:")
  print("1. Encrypt a file")
  print("2. Decrypt a file")
  print("3. Encrypt a folder")
  print("4. Decrypt a folder")
  print("5. Encrypt a message")
  print("6. Decrypt a message")
  print("7. Turnoff")
  mode = input("Enter your choice (1-7): ")
  key = load_key()
  while(True):
    if mode == '1':
      filepath = input("Enter the file path to encrypt: ")
      encrypt_file(key, filepath)
    elif mode == '2':
      filepath = input("Enter the file path to decrypt: ")
      decrypt_file(key, filepath)
    elif mode == '3':
      folderpath = input("Enter the folder path to encrypt: ")
      encrypt_folder(key, folderpath)
    elif mode == '4':
      folderpath = input("Enter the folder path to decrypt: ")
      decrypt_folder(key, folderpath)
    elif mode == '5':
      message = input("Enter the message to encrypt: ")
      encrypt_message(key, message)
    elif mode == '6':
      message = input("Enter the message to decrypt: ")
      decrypt_message(key, message)
    elif mode == '7':
      return
    else:
      print("Invalid mode selection.")
    mode = input("Enter your choice (1-7): ")

if __name__ == "__main__":
  #write_key() # Comment out if key already exists
  main()
